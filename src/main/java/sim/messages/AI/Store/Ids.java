// automatically generated by the FlatBuffers compiler, do not modify

package sim.messages.AI.Store;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Ids extends Table {
  public static Ids getRootAsIds(ByteBuffer _bb) { return getRootAsIds(_bb, new Ids()); }
  public static Ids getRootAsIds(ByteBuffer _bb, Ids obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public Ids __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int idvec(int j) { int o = __offset(4); return o != 0 ? bb.getShort(__vector(o) + j * 2) & 0xFFFF : 0; }
  public int idvecLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer idvecAsByteBuffer() { return __vector_as_bytebuffer(4, 2); }

  public static int createIds(FlatBufferBuilder builder,
      int idvecOffset) {
    builder.startObject(1);
    Ids.addIdvec(builder, idvecOffset);
    return Ids.endIds(builder);
  }

  public static void startIds(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addIdvec(FlatBufferBuilder builder, int idvecOffset) { builder.addOffset(0, idvecOffset, 0); }
  public static int createIdvecVector(FlatBufferBuilder builder, short[] data) { builder.startVector(2, data.length, 2); for (int i = data.length - 1; i >= 0; i--) builder.addShort(data[i]); return builder.endVector(); }
  public static void startIdvecVector(FlatBufferBuilder builder, int numElems) { builder.startVector(2, numElems, 2); }
  public static int endIds(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishIdsBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}


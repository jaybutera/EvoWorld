// automatically generated by the FlatBuffers compiler, do not modify

package AI.Obs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Observations extends Table {
  public static Observations getRootAsObservations(ByteBuffer _bb) { return getRootAsObservations(_bb, new Observations()); }
  public static Observations getRootAsObservations(ByteBuffer _bb, Observations obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public Observations __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public Creature obs(int j) { return obs(new Creature(), j); }
  public Creature obs(Creature obj, int j) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int obsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createObservations(FlatBufferBuilder builder,
      int obsOffset) {
    builder.startObject(1);
    Observations.addObs(builder, obsOffset);
    return Observations.endObservations(builder);
  }

  public static void startObservations(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addObs(FlatBufferBuilder builder, int obsOffset) { builder.addOffset(0, obsOffset, 0); }
  public static int createObsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startObsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endObservations(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishObservationsBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}


// automatically generated by the FlatBuffers compiler, do not modify

package sim.messages.AI.Obs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Creature extends Table {
  public static Creature getRootAsCreature(ByteBuffer _bb) { return getRootAsCreature(_bb, new Creature()); }
  public static Creature getRootAsCreature(ByteBuffer _bb, Creature obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public Creature __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int id() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public int view(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int viewLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer viewAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }

  public static int createCreature(FlatBufferBuilder builder,
      int id,
      int viewOffset) {
    builder.startObject(2);
    Creature.addView(builder, viewOffset);
    Creature.addId(builder, id);
    return Creature.endCreature(builder);
  }

  public static void startCreature(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addShort(0, (short)id, 0); }
  public static void addView(FlatBufferBuilder builder, int viewOffset) { builder.addOffset(1, viewOffset, 0); }
  public static int createViewVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startViewVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endCreature(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

